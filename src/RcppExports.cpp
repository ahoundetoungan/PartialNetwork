// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// rvMF
arma::mat rvMF(const int& size, const arma::vec& theta);
RcppExport SEXP _PartialNetwork_rvMF(SEXP sizeSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(rvMF(size, theta));
    return rcpp_result_gen;
END_RCPP
}
// logCpvMF
double logCpvMF(const int& p, const double& k);
RcppExport SEXP _PartialNetwork_logCpvMF(SEXP pSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(logCpvMF(p, k));
    return rcpp_result_gen;
END_RCPP
}
// dvMF
NumericVector dvMF(const arma::mat& z, const arma::vec& theta, const bool& logp);
RcppExport SEXP _PartialNetwork_dvMF(SEXP zSEXP, SEXP thetaSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(dvMF(z, theta, logp));
    return rcpp_result_gen;
END_RCPP
}
// updateGP
List updateGP(const arma::mat& Y, const arma::mat& trait, List& start, const arma::uvec& fixv, const arma::uvec& consb, const double& nsimul, const bool& fdegrees, const bool& fzeta, const NumericVector& hyperparms, const NumericVector& target, const NumericVector& jumpmin, const NumericVector& jumpmax, const double& c);
RcppExport SEXP _PartialNetwork_updateGP(SEXP YSEXP, SEXP traitSEXP, SEXP startSEXP, SEXP fixvSEXP, SEXP consbSEXP, SEXP nsimulSEXP, SEXP fdegreesSEXP, SEXP fzetaSEXP, SEXP hyperparmsSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type trait(traitSEXP);
    Rcpp::traits::input_parameter< List& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type fixv(fixvSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type consb(consbSEXP);
    Rcpp::traits::input_parameter< const double& >::type nsimul(nsimulSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fdegrees(fdegreesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fzeta(fzetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type hyperparms(hyperparmsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(updateGP(Y, trait, start, fixv, consb, nsimul, fdegrees, fzeta, hyperparms, target, jumpmin, jumpmax, c));
    return rcpp_result_gen;
END_RCPP
}
// dnetwork
arma::mat dnetwork(List& Gparms, const arma::mat& traitard, const Nullable<NumericMatrix&> traitnonard, Nullable<unsigned int> m, Nullable<unsigned int> metrostart);
RcppExport SEXP _PartialNetwork_dnetwork(SEXP GparmsSEXP, SEXP traitardSEXP, SEXP traitnonardSEXP, SEXP mSEXP, SEXP metrostartSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type Gparms(GparmsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type traitard(traitardSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericMatrix&> >::type traitnonard(traitnonardSEXP);
    Rcpp::traits::input_parameter< Nullable<unsigned int> >::type m(mSEXP);
    Rcpp::traits::input_parameter< Nullable<unsigned int> >::type metrostart(metrostartSEXP);
    rcpp_result_gen = Rcpp::wrap(dnetwork(Gparms, traitard, traitnonard, m, metrostart));
    return rcpp_result_gen;
END_RCPP
}
// Prob
arma::mat Prob(arma::vec& nu, arma::vec& d, double& zeta, arma::mat& z);
RcppExport SEXP _PartialNetwork_Prob(SEXP nuSEXP, SEXP dSEXP, SEXP zetaSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< double& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(Prob(nu, d, zeta, z));
    return rcpp_result_gen;
END_RCPP
}
// Graph
arma::umat Graph(arma::mat& prob);
RcppExport SEXP _PartialNetwork_Graph(SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(Graph(prob));
    return rcpp_result_gen;
END_RCPP
}
// invmodij
Eigen::MatrixXd invmodij(const Eigen::MatrixXd& invM, const unsigned int& i, const unsigned int& j, const double& eps_);
RcppExport SEXP _PartialNetwork_invmodij(SEXP invMSEXP, SEXP iSEXP, SEXP jSEXP, SEXP eps_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type invM(invMSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_(eps_SEXP);
    rcpp_result_gen = Rcpp::wrap(invmodij(invM, i, j, eps_));
    return rcpp_result_gen;
END_RCPP
}
// invmodijk
Eigen::MatrixXd invmodijk(const Eigen::MatrixXd& invM, const unsigned int& i, const unsigned int& j, const unsigned int& k, const double& eps_1, const double& eps_2);
RcppExport SEXP _PartialNetwork_invmodijk(SEXP invMSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kSEXP, SEXP eps_1SEXP, SEXP eps_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type invM(invMSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_1(eps_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_2(eps_2SEXP);
    rcpp_result_gen = Rcpp::wrap(invmodijk(invM, i, j, k, eps_1, eps_2));
    return rcpp_result_gen;
END_RCPP
}
// detmodij
double detmodij(const double& detM, const Eigen::MatrixXd& invM, const unsigned int& i, const unsigned int& j, const double& eps_);
RcppExport SEXP _PartialNetwork_detmodij(SEXP detMSEXP, SEXP invMSEXP, SEXP iSEXP, SEXP jSEXP, SEXP eps_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type detM(detMSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type invM(invMSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_(eps_SEXP);
    rcpp_result_gen = Rcpp::wrap(detmodij(detM, invM, i, j, eps_));
    return rcpp_result_gen;
END_RCPP
}
// detmodijk
double detmodijk(const double& detM, const Eigen::MatrixXd& invM, const unsigned int& i, const unsigned int& j, const unsigned int& k, const double& eps_1, const double& eps_2);
RcppExport SEXP _PartialNetwork_detmodijk(SEXP detMSEXP, SEXP invMSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kSEXP, SEXP eps_1SEXP, SEXP eps_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type detM(detMSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type invM(invMSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_1(eps_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_2(eps_2SEXP);
    rcpp_result_gen = Rcpp::wrap(detmodijk(detM, invM, i, j, k, eps_1, eps_2));
    return rcpp_result_gen;
END_RCPP
}
// peerMCMC
NumericMatrix peerMCMC(const List& y, const List& X, const arma::vec parms0, const List& hyperparms, const int& iteration, const bool& intercept, const double& target, const double& jumpmin, const double& jumpmax, const double& c);
RcppExport SEXP _PartialNetwork_peerMCMC(SEXP ySEXP, SEXP XSEXP, SEXP parms0SEXP, SEXP hyperparmsSEXP, SEXP iterationSEXP, SEXP interceptSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type parms0(parms0SEXP);
    Rcpp::traits::input_parameter< const List& >::type hyperparms(hyperparmsSEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const bool& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const double& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(peerMCMC(y, X, parms0, hyperparms, iteration, intercept, target, jumpmin, jumpmax, c));
    return rcpp_result_gen;
END_RCPP
}
// sartpoint
NumericVector sartpoint(const List& prior, const List& y, const List& X, const bool& intercept);
RcppExport SEXP _PartialNetwork_sartpoint(SEXP priorSEXP, SEXP ySEXP, SEXP XSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool& >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(sartpoint(prior, y, X, intercept));
    return rcpp_result_gen;
END_RCPP
}
// instruments
List instruments(const arma::mat& distr, arma::mat& X, Nullable<arma::vec&> y, const unsigned int& S, const unsigned int& pow);
RcppExport SEXP _PartialNetwork_instruments(SEXP distrSEXP, SEXP XSEXP, SEXP ySEXP, SEXP SSEXP, SEXP powSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<arma::vec&> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type pow(powSEXP);
    rcpp_result_gen = Rcpp::wrap(instruments(distr, X, y, S, pow));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PartialNetwork_rvMF", (DL_FUNC) &_PartialNetwork_rvMF, 2},
    {"_PartialNetwork_logCpvMF", (DL_FUNC) &_PartialNetwork_logCpvMF, 2},
    {"_PartialNetwork_dvMF", (DL_FUNC) &_PartialNetwork_dvMF, 3},
    {"_PartialNetwork_updateGP", (DL_FUNC) &_PartialNetwork_updateGP, 13},
    {"_PartialNetwork_dnetwork", (DL_FUNC) &_PartialNetwork_dnetwork, 5},
    {"_PartialNetwork_Prob", (DL_FUNC) &_PartialNetwork_Prob, 4},
    {"_PartialNetwork_Graph", (DL_FUNC) &_PartialNetwork_Graph, 1},
    {"_PartialNetwork_invmodij", (DL_FUNC) &_PartialNetwork_invmodij, 4},
    {"_PartialNetwork_invmodijk", (DL_FUNC) &_PartialNetwork_invmodijk, 6},
    {"_PartialNetwork_detmodij", (DL_FUNC) &_PartialNetwork_detmodij, 5},
    {"_PartialNetwork_detmodijk", (DL_FUNC) &_PartialNetwork_detmodijk, 7},
    {"_PartialNetwork_peerMCMC", (DL_FUNC) &_PartialNetwork_peerMCMC, 10},
    {"_PartialNetwork_sartpoint", (DL_FUNC) &_PartialNetwork_sartpoint, 4},
    {"_PartialNetwork_instruments", (DL_FUNC) &_PartialNetwork_instruments, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_PartialNetwork(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
