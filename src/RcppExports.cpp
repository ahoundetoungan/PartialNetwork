// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// updateGP
List updateGP(const arma::mat& Y, const arma::mat& trait, const arma::mat& z0, const arma::mat& v0, const arma::vec& d0, const arma::rowvec& b0, const arma::rowvec& eta0, const double& zeta0, const arma::uvec& fixv, const arma::uvec& consb, const double& nsimul, const bool& fdegrees, const bool& fzeta, const NumericVector& hyperparms, const NumericVector& target, const NumericVector& jumpmin, const NumericVector& jumpmax, const int& c, const bool& display_progress);
RcppExport SEXP _PartialNetwork_updateGP(SEXP YSEXP, SEXP traitSEXP, SEXP z0SEXP, SEXP v0SEXP, SEXP d0SEXP, SEXP b0SEXP, SEXP eta0SEXP, SEXP zeta0SEXP, SEXP fixvSEXP, SEXP consbSEXP, SEXP nsimulSEXP, SEXP fdegreesSEXP, SEXP fzetaSEXP, SEXP hyperparmsSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type trait(traitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type eta0(eta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type fixv(fixvSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type consb(consbSEXP);
    Rcpp::traits::input_parameter< const double& >::type nsimul(nsimulSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fdegrees(fdegreesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fzeta(fzetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type hyperparms(hyperparmsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const int& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(updateGP(Y, trait, z0, v0, d0, b0, eta0, zeta0, fixv, consb, nsimul, fdegrees, fzeta, hyperparms, target, jumpmin, jumpmax, c, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// dnetwork1
List dnetwork1(const double& T, const double& P, const arma::cube& z, const arma::mat& d, const arma::vec& zeta, const unsigned int& N, const unsigned int& Metrostart, const bool& display_progress);
RcppExport SEXP _PartialNetwork_dnetwork1(SEXP TSEXP, SEXP PSEXP, SEXP zSEXP, SEXP dSEXP, SEXP zetaSEXP, SEXP NSEXP, SEXP MetrostartSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const double& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type Metrostart(MetrostartSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(dnetwork1(T, P, z, d, zeta, N, Metrostart, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// dnetwork2
List dnetwork2(const double& T, const double& P, const arma::cube& z, const arma::mat& d, const arma::vec& zeta, const arma::mat& Xard, const arma::mat& Xnonard, const arma::uvec& iARD, const arma::uvec& inonARD, const unsigned int& M, const unsigned int& Metrostart, const bool& display_progress);
RcppExport SEXP _PartialNetwork_dnetwork2(SEXP TSEXP, SEXP PSEXP, SEXP zSEXP, SEXP dSEXP, SEXP zetaSEXP, SEXP XardSEXP, SEXP XnonardSEXP, SEXP iARDSEXP, SEXP inonARDSEXP, SEXP MSEXP, SEXP MetrostartSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const double& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xard(XardSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xnonard(XnonardSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type iARD(iARDSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type inonARD(inonARDSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type Metrostart(MetrostartSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(dnetwork2(T, P, z, d, zeta, Xard, Xnonard, iARD, inonARD, M, Metrostart, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// Prob
arma::mat Prob(arma::vec& nu, arma::vec& d, double& zeta, arma::mat& z);
RcppExport SEXP _PartialNetwork_Prob(SEXP nuSEXP, SEXP dSEXP, SEXP zetaSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< double& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(Prob(nu, d, zeta, z));
    return rcpp_result_gen;
END_RCPP
}
// Graph
arma::umat Graph(arma::mat& prob);
RcppExport SEXP _PartialNetwork_Graph(SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(Graph(prob));
    return rcpp_result_gen;
END_RCPP
}
// instruments1
List instruments1(const arma::mat& dnetwork, arma::mat& X, arma::vec& y, const int& S, const int& pow, const bool& expG);
RcppExport SEXP _PartialNetwork_instruments1(SEXP dnetworkSEXP, SEXP XSEXP, SEXP ySEXP, SEXP SSEXP, SEXP powSEXP, SEXP expGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dnetwork(dnetworkSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type pow(powSEXP);
    Rcpp::traits::input_parameter< const bool& >::type expG(expGSEXP);
    rcpp_result_gen = Rcpp::wrap(instruments1(dnetwork, X, y, S, pow, expG));
    return rcpp_result_gen;
END_RCPP
}
// instruments2
List instruments2(const arma::mat& dnetwork, arma::mat& X, const int& S, const int& pow, const bool& expG);
RcppExport SEXP _PartialNetwork_instruments2(SEXP dnetworkSEXP, SEXP XSEXP, SEXP SSEXP, SEXP powSEXP, SEXP expGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dnetwork(dnetworkSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type pow(powSEXP);
    Rcpp::traits::input_parameter< const bool& >::type expG(expGSEXP);
    rcpp_result_gen = Rcpp::wrap(instruments2(dnetwork, X, S, pow, expG));
    return rcpp_result_gen;
END_RCPP
}
// flistGnorm1
List flistGnorm1(List& dnetwork, arma::vec& y, arma::mat& Xone, arma::mat& X, const int& M);
RcppExport SEXP _PartialNetwork_flistGnorm1(SEXP dnetworkSEXP, SEXP ySEXP, SEXP XoneSEXP, SEXP XSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type dnetwork(dnetworkSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xone(XoneSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(flistGnorm1(dnetwork, y, Xone, X, M));
    return rcpp_result_gen;
END_RCPP
}
// flistGnorm2
List flistGnorm2(List& G, arma::vec& y, arma::mat& Xone, arma::mat& X, const int& M);
RcppExport SEXP _PartialNetwork_flistGnorm2(SEXP GSEXP, SEXP ySEXP, SEXP XoneSEXP, SEXP XSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xone(XoneSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(flistGnorm2(G, y, Xone, X, M));
    return rcpp_result_gen;
END_RCPP
}
// flistGnorm1nc
List flistGnorm1nc(List& dnetwork, arma::vec& y, arma::mat& Xone, const int& M);
RcppExport SEXP _PartialNetwork_flistGnorm1nc(SEXP dnetworkSEXP, SEXP ySEXP, SEXP XoneSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type dnetwork(dnetworkSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xone(XoneSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(flistGnorm1nc(dnetwork, y, Xone, M));
    return rcpp_result_gen;
END_RCPP
}
// flistGnorm2nc
List flistGnorm2nc(List& G, arma::vec& y, arma::mat& Xone, const int& M);
RcppExport SEXP _PartialNetwork_flistGnorm2nc(SEXP GSEXP, SEXP ySEXP, SEXP XoneSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xone(XoneSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(flistGnorm2nc(G, y, Xone, M));
    return rcpp_result_gen;
END_RCPP
}
// simG
List simG(List& dnetwork, const arma::vec& N, const int& M);
RcppExport SEXP _PartialNetwork_simG(SEXP dnetworkSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type dnetwork(dnetworkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(simG(dnetwork, N, M));
    return rcpp_result_gen;
END_RCPP
}
// simGnorm
List simGnorm(List& dnetwork, const arma::vec& N, const int& M);
RcppExport SEXP _PartialNetwork_simGnorm(SEXP dnetworkSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type dnetwork(dnetworkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(simGnorm(dnetwork, N, M));
    return rcpp_result_gen;
END_RCPP
}
// peerMCMCnoc_none
List peerMCMCnoc_none(const List& y, const List& V, List& Gnorm, List& prior, List ListIndex, const int& M, const IntegerVector& N, const int& kbeta, const arma::vec& theta0, const arma::mat& invsigmatheta, const double& zeta0, const double& invsigma2zeta, const double& a, const double& b, const arma::vec& parms0, const int& iteration, const double& target, const double& jumpmin, const double& jumpmax, const double& c, const int& progress);
RcppExport SEXP _PartialNetwork_peerMCMCnoc_none(SEXP ySEXP, SEXP VSEXP, SEXP GnormSEXP, SEXP priorSEXP, SEXP ListIndexSEXP, SEXP MSEXP, SEXP NSEXP, SEXP kbetaSEXP, SEXP theta0SEXP, SEXP invsigmathetaSEXP, SEXP zeta0SEXP, SEXP invsigma2zetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP parms0SEXP, SEXP iterationSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type V(VSEXP);
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List >::type ListIndex(ListIndexSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invsigmatheta(invsigmathetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type invsigma2zeta(invsigma2zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parms0(parms0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const double& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(peerMCMCnoc_none(y, V, Gnorm, prior, ListIndex, M, N, kbeta, theta0, invsigmatheta, zeta0, invsigma2zeta, a, b, parms0, iteration, target, jumpmin, jumpmax, c, progress));
    return rcpp_result_gen;
END_RCPP
}
// peerMCMCblocknoc_none
List peerMCMCblocknoc_none(const List& y, const List& V, List& Gnorm, List& prior, List ListIndex, const int& M, const IntegerVector& N, const int& kbeta, const arma::vec& theta0, const arma::mat& invsigmatheta, const double& zeta0, const double& invsigma2zeta, const double& a, const double& b, const arma::vec& parms0, const int& iteration, const double& target, const double& jumpmin, const double& jumpmax, const double& c, const int& progress, const int& nupmax);
RcppExport SEXP _PartialNetwork_peerMCMCblocknoc_none(SEXP ySEXP, SEXP VSEXP, SEXP GnormSEXP, SEXP priorSEXP, SEXP ListIndexSEXP, SEXP MSEXP, SEXP NSEXP, SEXP kbetaSEXP, SEXP theta0SEXP, SEXP invsigmathetaSEXP, SEXP zeta0SEXP, SEXP invsigma2zetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP parms0SEXP, SEXP iterationSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP, SEXP progressSEXP, SEXP nupmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type V(VSEXP);
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List >::type ListIndex(ListIndexSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invsigmatheta(invsigmathetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type invsigma2zeta(invsigma2zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parms0(parms0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const double& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< const int& >::type nupmax(nupmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(peerMCMCblocknoc_none(y, V, Gnorm, prior, ListIndex, M, N, kbeta, theta0, invsigmatheta, zeta0, invsigma2zeta, a, b, parms0, iteration, target, jumpmin, jumpmax, c, progress, nupmax));
    return rcpp_result_gen;
END_RCPP
}
// peerMCMC_none
List peerMCMC_none(const List& y, const List& X, const List& Xone, List& Gnorm, List& prior, List ListIndex, const int& M, const IntegerVector& N, const int& kbeta, const int& kgamma, const arma::vec& theta0, const arma::mat& invsigmatheta, const double& zeta0, const double& invsigma2zeta, const double& a, const double& b, const arma::vec& parms0, const int& iteration, const double& target, const double& jumpmin, const double& jumpmax, const double& c, const int& progress);
RcppExport SEXP _PartialNetwork_peerMCMC_none(SEXP ySEXP, SEXP XSEXP, SEXP XoneSEXP, SEXP GnormSEXP, SEXP priorSEXP, SEXP ListIndexSEXP, SEXP MSEXP, SEXP NSEXP, SEXP kbetaSEXP, SEXP kgammaSEXP, SEXP theta0SEXP, SEXP invsigmathetaSEXP, SEXP zeta0SEXP, SEXP invsigma2zetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP parms0SEXP, SEXP iterationSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type Xone(XoneSEXP);
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List >::type ListIndex(ListIndexSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type kgamma(kgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invsigmatheta(invsigmathetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type invsigma2zeta(invsigma2zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parms0(parms0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const double& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(peerMCMC_none(y, X, Xone, Gnorm, prior, ListIndex, M, N, kbeta, kgamma, theta0, invsigmatheta, zeta0, invsigma2zeta, a, b, parms0, iteration, target, jumpmin, jumpmax, c, progress));
    return rcpp_result_gen;
END_RCPP
}
// peerMCMCblock_none
List peerMCMCblock_none(const List& y, const List& X, const List& Xone, List& Gnorm, List& prior, List ListIndex, const int& M, const IntegerVector& N, const int& kbeta, const int& kgamma, const arma::vec& theta0, const arma::mat& invsigmatheta, const double& zeta0, const double& invsigma2zeta, const double& a, const double& b, const arma::vec& parms0, const int& iteration, const double& target, const double& jumpmin, const double& jumpmax, const double& c, const int& progress, const int& nupmax);
RcppExport SEXP _PartialNetwork_peerMCMCblock_none(SEXP ySEXP, SEXP XSEXP, SEXP XoneSEXP, SEXP GnormSEXP, SEXP priorSEXP, SEXP ListIndexSEXP, SEXP MSEXP, SEXP NSEXP, SEXP kbetaSEXP, SEXP kgammaSEXP, SEXP theta0SEXP, SEXP invsigmathetaSEXP, SEXP zeta0SEXP, SEXP invsigma2zetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP parms0SEXP, SEXP iterationSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP, SEXP progressSEXP, SEXP nupmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type Xone(XoneSEXP);
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List >::type ListIndex(ListIndexSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type kgamma(kgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invsigmatheta(invsigmathetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type invsigma2zeta(invsigma2zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parms0(parms0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const double& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< const int& >::type nupmax(nupmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(peerMCMCblock_none(y, X, Xone, Gnorm, prior, ListIndex, M, N, kbeta, kgamma, theta0, invsigmatheta, zeta0, invsigma2zeta, a, b, parms0, iteration, target, jumpmin, jumpmax, c, progress, nupmax));
    return rcpp_result_gen;
END_RCPP
}
// peerMCMCnoc_ard
List peerMCMCnoc_ard(const List& y, const List& V, List& Gnorm, List& G0obs, List& prior, List& ListIndex, const int& M, const Rcpp::IntegerVector& N, const Rcpp::IntegerVector& N1, const int& kbeta, const arma::vec& theta0, const arma::mat& invsigmatheta, const double& zeta0, const double& invsigma2zeta, const double& a, const double& b, List& d, const arma::vec& zetaard, List& murho, List& Vrho, const arma::vec& Krho, List& neighbor, List& weight, List& iARD, List& inonARD, const Rcpp::IntegerVector& P, const arma::vec& parms0, const int& iteration, const arma::vec& target, const arma::vec& jumpmin, const arma::vec& jumpmax, const double& c, const arma::vec& type, const int& progress);
RcppExport SEXP _PartialNetwork_peerMCMCnoc_ard(SEXP ySEXP, SEXP VSEXP, SEXP GnormSEXP, SEXP G0obsSEXP, SEXP priorSEXP, SEXP ListIndexSEXP, SEXP MSEXP, SEXP NSEXP, SEXP N1SEXP, SEXP kbetaSEXP, SEXP theta0SEXP, SEXP invsigmathetaSEXP, SEXP zeta0SEXP, SEXP invsigma2zetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP dSEXP, SEXP zetaardSEXP, SEXP murhoSEXP, SEXP VrhoSEXP, SEXP KrhoSEXP, SEXP neighborSEXP, SEXP weightSEXP, SEXP iARDSEXP, SEXP inonARDSEXP, SEXP PSEXP, SEXP parms0SEXP, SEXP iterationSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP, SEXP typeSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type V(VSEXP);
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< List& >::type G0obs(G0obsSEXP);
    Rcpp::traits::input_parameter< List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List& >::type ListIndex(ListIndexSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invsigmatheta(invsigmathetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type invsigma2zeta(invsigma2zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< List& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zetaard(zetaardSEXP);
    Rcpp::traits::input_parameter< List& >::type murho(murhoSEXP);
    Rcpp::traits::input_parameter< List& >::type Vrho(VrhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Krho(KrhoSEXP);
    Rcpp::traits::input_parameter< List& >::type neighbor(neighborSEXP);
    Rcpp::traits::input_parameter< List& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< List& >::type iARD(iARDSEXP);
    Rcpp::traits::input_parameter< List& >::type inonARD(inonARDSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parms0(parms0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const int& >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(peerMCMCnoc_ard(y, V, Gnorm, G0obs, prior, ListIndex, M, N, N1, kbeta, theta0, invsigmatheta, zeta0, invsigma2zeta, a, b, d, zetaard, murho, Vrho, Krho, neighbor, weight, iARD, inonARD, P, parms0, iteration, target, jumpmin, jumpmax, c, type, progress));
    return rcpp_result_gen;
END_RCPP
}
// peerMCMCblocknoc_ard
List peerMCMCblocknoc_ard(const List& y, const List& V, List& Gnorm, List& G0obs, List& prior, List& ListIndex, const int& M, const Rcpp::IntegerVector& N, const Rcpp::IntegerVector& N1, const int& kbeta, const arma::vec& theta0, const arma::mat& invsigmatheta, const double& zeta0, const double& invsigma2zeta, const double& a, const double& b, List& d, const arma::vec& zetaard, List& murho, List& Vrho, const arma::vec& Krho, List& neighbor, List& weight, List& iARD, List& inonARD, const Rcpp::IntegerVector& P, const arma::vec& parms0, const int& iteration, const arma::vec& target, const arma::vec& jumpmin, const arma::vec& jumpmax, const double& c, const arma::vec& type, const int& progress, const int& nupmax);
RcppExport SEXP _PartialNetwork_peerMCMCblocknoc_ard(SEXP ySEXP, SEXP VSEXP, SEXP GnormSEXP, SEXP G0obsSEXP, SEXP priorSEXP, SEXP ListIndexSEXP, SEXP MSEXP, SEXP NSEXP, SEXP N1SEXP, SEXP kbetaSEXP, SEXP theta0SEXP, SEXP invsigmathetaSEXP, SEXP zeta0SEXP, SEXP invsigma2zetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP dSEXP, SEXP zetaardSEXP, SEXP murhoSEXP, SEXP VrhoSEXP, SEXP KrhoSEXP, SEXP neighborSEXP, SEXP weightSEXP, SEXP iARDSEXP, SEXP inonARDSEXP, SEXP PSEXP, SEXP parms0SEXP, SEXP iterationSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP, SEXP typeSEXP, SEXP progressSEXP, SEXP nupmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type V(VSEXP);
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< List& >::type G0obs(G0obsSEXP);
    Rcpp::traits::input_parameter< List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List& >::type ListIndex(ListIndexSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invsigmatheta(invsigmathetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type invsigma2zeta(invsigma2zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< List& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zetaard(zetaardSEXP);
    Rcpp::traits::input_parameter< List& >::type murho(murhoSEXP);
    Rcpp::traits::input_parameter< List& >::type Vrho(VrhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Krho(KrhoSEXP);
    Rcpp::traits::input_parameter< List& >::type neighbor(neighborSEXP);
    Rcpp::traits::input_parameter< List& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< List& >::type iARD(iARDSEXP);
    Rcpp::traits::input_parameter< List& >::type inonARD(inonARDSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parms0(parms0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const int& >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< const int& >::type nupmax(nupmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(peerMCMCblocknoc_ard(y, V, Gnorm, G0obs, prior, ListIndex, M, N, N1, kbeta, theta0, invsigmatheta, zeta0, invsigma2zeta, a, b, d, zetaard, murho, Vrho, Krho, neighbor, weight, iARD, inonARD, P, parms0, iteration, target, jumpmin, jumpmax, c, type, progress, nupmax));
    return rcpp_result_gen;
END_RCPP
}
// peerMCMC_ard
List peerMCMC_ard(const List& y, const List& X, const List& Xone, List& Gnorm, List& G0obs, List& prior, List& ListIndex, const int& M, const Rcpp::IntegerVector& N, const Rcpp::IntegerVector& N1, const int& kbeta, const int& kgamma, const arma::vec& theta0, const arma::mat& invsigmatheta, const double& zeta0, const double& invsigma2zeta, const double& a, const double& b, const List& d, const arma::vec& zetaard, const List& murho, const List& Vrho, const arma::vec& Krho, List& neighbor, List& weight, List& iARD, List& inonARD, const Rcpp::IntegerVector& P, const arma::vec& parms0, const int& iteration, const arma::vec& target, const arma::vec& jumpmin, const arma::vec& jumpmax, const double& c, const arma::vec& type, const int& progress);
RcppExport SEXP _PartialNetwork_peerMCMC_ard(SEXP ySEXP, SEXP XSEXP, SEXP XoneSEXP, SEXP GnormSEXP, SEXP G0obsSEXP, SEXP priorSEXP, SEXP ListIndexSEXP, SEXP MSEXP, SEXP NSEXP, SEXP N1SEXP, SEXP kbetaSEXP, SEXP kgammaSEXP, SEXP theta0SEXP, SEXP invsigmathetaSEXP, SEXP zeta0SEXP, SEXP invsigma2zetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP dSEXP, SEXP zetaardSEXP, SEXP murhoSEXP, SEXP VrhoSEXP, SEXP KrhoSEXP, SEXP neighborSEXP, SEXP weightSEXP, SEXP iARDSEXP, SEXP inonARDSEXP, SEXP PSEXP, SEXP parms0SEXP, SEXP iterationSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP, SEXP typeSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type Xone(XoneSEXP);
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< List& >::type G0obs(G0obsSEXP);
    Rcpp::traits::input_parameter< List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List& >::type ListIndex(ListIndexSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type kgamma(kgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invsigmatheta(invsigmathetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type invsigma2zeta(invsigma2zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const List& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zetaard(zetaardSEXP);
    Rcpp::traits::input_parameter< const List& >::type murho(murhoSEXP);
    Rcpp::traits::input_parameter< const List& >::type Vrho(VrhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Krho(KrhoSEXP);
    Rcpp::traits::input_parameter< List& >::type neighbor(neighborSEXP);
    Rcpp::traits::input_parameter< List& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< List& >::type iARD(iARDSEXP);
    Rcpp::traits::input_parameter< List& >::type inonARD(inonARDSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parms0(parms0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const int& >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(peerMCMC_ard(y, X, Xone, Gnorm, G0obs, prior, ListIndex, M, N, N1, kbeta, kgamma, theta0, invsigmatheta, zeta0, invsigma2zeta, a, b, d, zetaard, murho, Vrho, Krho, neighbor, weight, iARD, inonARD, P, parms0, iteration, target, jumpmin, jumpmax, c, type, progress));
    return rcpp_result_gen;
END_RCPP
}
// peerMCMCblock_ard
List peerMCMCblock_ard(const List& y, const List& X, const List& Xone, List& Gnorm, List& G0obs, List& prior, List& ListIndex, const int& M, const Rcpp::IntegerVector& N, const Rcpp::IntegerVector& N1, const int& kbeta, const int& kgamma, const arma::vec& theta0, const arma::mat& invsigmatheta, const double& zeta0, const double& invsigma2zeta, const double& a, const double& b, List& d, const arma::vec& zetaard, List& murho, List& Vrho, const arma::vec& Krho, List& neighbor, List& weight, List& iARD, List& inonARD, const Rcpp::IntegerVector& P, const arma::vec& parms0, const int& iteration, const arma::vec& target, const arma::vec& jumpmin, const arma::vec& jumpmax, const double& c, const arma::vec& type, const int& progress, const int& nupmax);
RcppExport SEXP _PartialNetwork_peerMCMCblock_ard(SEXP ySEXP, SEXP XSEXP, SEXP XoneSEXP, SEXP GnormSEXP, SEXP G0obsSEXP, SEXP priorSEXP, SEXP ListIndexSEXP, SEXP MSEXP, SEXP NSEXP, SEXP N1SEXP, SEXP kbetaSEXP, SEXP kgammaSEXP, SEXP theta0SEXP, SEXP invsigmathetaSEXP, SEXP zeta0SEXP, SEXP invsigma2zetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP dSEXP, SEXP zetaardSEXP, SEXP murhoSEXP, SEXP VrhoSEXP, SEXP KrhoSEXP, SEXP neighborSEXP, SEXP weightSEXP, SEXP iARDSEXP, SEXP inonARDSEXP, SEXP PSEXP, SEXP parms0SEXP, SEXP iterationSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP, SEXP typeSEXP, SEXP progressSEXP, SEXP nupmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type Xone(XoneSEXP);
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< List& >::type G0obs(G0obsSEXP);
    Rcpp::traits::input_parameter< List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List& >::type ListIndex(ListIndexSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type kgamma(kgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invsigmatheta(invsigmathetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type invsigma2zeta(invsigma2zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< List& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zetaard(zetaardSEXP);
    Rcpp::traits::input_parameter< List& >::type murho(murhoSEXP);
    Rcpp::traits::input_parameter< List& >::type Vrho(VrhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Krho(KrhoSEXP);
    Rcpp::traits::input_parameter< List& >::type neighbor(neighborSEXP);
    Rcpp::traits::input_parameter< List& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< List& >::type iARD(iARDSEXP);
    Rcpp::traits::input_parameter< List& >::type inonARD(inonARDSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parms0(parms0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const int& >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< const int& >::type nupmax(nupmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(peerMCMCblock_ard(y, X, Xone, Gnorm, G0obs, prior, ListIndex, M, N, N1, kbeta, kgamma, theta0, invsigmatheta, zeta0, invsigma2zeta, a, b, d, zetaard, murho, Vrho, Krho, neighbor, weight, iARD, inonARD, P, parms0, iteration, target, jumpmin, jumpmax, c, type, progress, nupmax));
    return rcpp_result_gen;
END_RCPP
}
// peerMCMCnoc_pl
List peerMCMCnoc_pl(const List& y, const List& V, List& Gnorm, List& G0obs, List& prior, List& ListIndex, const int& M, const IntegerVector& N, const int& kbeta, const arma::vec& theta0, const arma::mat& invsigmatheta, const double& zeta0, const double& invsigma2zeta, const double& a, const double& b, const Rcpp::NumericVector weight, const arma::mat& dZ, const arma::vec& murho, const arma::mat& Vrho, const int& Krho, Eigen::VectorXd& lFdZrho1, Eigen::VectorXd& lFdZrho0, const arma::vec& parms0, const int& iteration, const arma::vec& target, const arma::vec& jumpmin, const arma::vec& jumpmax, const double& c, const int& progress, const int& type, const bool& Afixed, const Eigen::ArrayXd& G0obsvec);
RcppExport SEXP _PartialNetwork_peerMCMCnoc_pl(SEXP ySEXP, SEXP VSEXP, SEXP GnormSEXP, SEXP G0obsSEXP, SEXP priorSEXP, SEXP ListIndexSEXP, SEXP MSEXP, SEXP NSEXP, SEXP kbetaSEXP, SEXP theta0SEXP, SEXP invsigmathetaSEXP, SEXP zeta0SEXP, SEXP invsigma2zetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP weightSEXP, SEXP dZSEXP, SEXP murhoSEXP, SEXP VrhoSEXP, SEXP KrhoSEXP, SEXP lFdZrho1SEXP, SEXP lFdZrho0SEXP, SEXP parms0SEXP, SEXP iterationSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP, SEXP progressSEXP, SEXP typeSEXP, SEXP AfixedSEXP, SEXP G0obsvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type V(VSEXP);
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< List& >::type G0obs(G0obsSEXP);
    Rcpp::traits::input_parameter< List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List& >::type ListIndex(ListIndexSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invsigmatheta(invsigmathetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type invsigma2zeta(invsigma2zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dZ(dZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type murho(murhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Vrho(VrhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type Krho(KrhoSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type lFdZrho1(lFdZrho1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type lFdZrho0(lFdZrho0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parms0(parms0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< const int& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Afixed(AfixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type G0obsvec(G0obsvecSEXP);
    rcpp_result_gen = Rcpp::wrap(peerMCMCnoc_pl(y, V, Gnorm, G0obs, prior, ListIndex, M, N, kbeta, theta0, invsigmatheta, zeta0, invsigma2zeta, a, b, weight, dZ, murho, Vrho, Krho, lFdZrho1, lFdZrho0, parms0, iteration, target, jumpmin, jumpmax, c, progress, type, Afixed, G0obsvec));
    return rcpp_result_gen;
END_RCPP
}
// peerMCMCblocknoc_pl
List peerMCMCblocknoc_pl(const List& y, const List& V, List& Gnorm, List& G0obs, List& prior, List& ListIndex, const int& M, const IntegerVector& N, const int& kbeta, const arma::vec& theta0, const arma::mat& invsigmatheta, const double& zeta0, const double& invsigma2zeta, const double& a, const double& b, const Rcpp::NumericVector weight, const arma::mat& dZ, const arma::vec& murho, const arma::mat& Vrho, const int& Krho, Eigen::VectorXd& lFdZrho1, Eigen::VectorXd& lFdZrho0, const arma::vec& parms0, const int& iteration, const arma::vec& target, const arma::vec& jumpmin, const arma::vec& jumpmax, const double& c, const int& progress, const int& nupmax, const int& type, const bool& Afixed, const Eigen::ArrayXd& G0obsvec);
RcppExport SEXP _PartialNetwork_peerMCMCblocknoc_pl(SEXP ySEXP, SEXP VSEXP, SEXP GnormSEXP, SEXP G0obsSEXP, SEXP priorSEXP, SEXP ListIndexSEXP, SEXP MSEXP, SEXP NSEXP, SEXP kbetaSEXP, SEXP theta0SEXP, SEXP invsigmathetaSEXP, SEXP zeta0SEXP, SEXP invsigma2zetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP weightSEXP, SEXP dZSEXP, SEXP murhoSEXP, SEXP VrhoSEXP, SEXP KrhoSEXP, SEXP lFdZrho1SEXP, SEXP lFdZrho0SEXP, SEXP parms0SEXP, SEXP iterationSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP, SEXP progressSEXP, SEXP nupmaxSEXP, SEXP typeSEXP, SEXP AfixedSEXP, SEXP G0obsvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type V(VSEXP);
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< List& >::type G0obs(G0obsSEXP);
    Rcpp::traits::input_parameter< List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List& >::type ListIndex(ListIndexSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invsigmatheta(invsigmathetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type invsigma2zeta(invsigma2zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dZ(dZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type murho(murhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Vrho(VrhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type Krho(KrhoSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type lFdZrho1(lFdZrho1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type lFdZrho0(lFdZrho0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parms0(parms0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< const int& >::type nupmax(nupmaxSEXP);
    Rcpp::traits::input_parameter< const int& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Afixed(AfixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type G0obsvec(G0obsvecSEXP);
    rcpp_result_gen = Rcpp::wrap(peerMCMCblocknoc_pl(y, V, Gnorm, G0obs, prior, ListIndex, M, N, kbeta, theta0, invsigmatheta, zeta0, invsigma2zeta, a, b, weight, dZ, murho, Vrho, Krho, lFdZrho1, lFdZrho0, parms0, iteration, target, jumpmin, jumpmax, c, progress, nupmax, type, Afixed, G0obsvec));
    return rcpp_result_gen;
END_RCPP
}
// peerMCMC_pl
List peerMCMC_pl(const List& y, const List& X, const List& Xone, List& Gnorm, List& G0obs, List& prior, List& ListIndex, const int& M, const IntegerVector& N, const int& kbeta, const int& kgamma, const arma::vec& theta0, const arma::mat& invsigmatheta, const double& zeta0, const double& invsigma2zeta, const double& a, const double& b, const arma::mat& dZ, const Rcpp::NumericVector weight, const arma::vec& murho, const arma::mat& Vrho, const int& Krho, Eigen::VectorXd& lFdZrho1, Eigen::VectorXd& lFdZrho0, const arma::vec& parms0, const int& iteration, const arma::vec& target, const arma::vec& jumpmin, const arma::vec& jumpmax, const double& c, const int& progress, const int& type, const bool& Afixed, const Eigen::ArrayXd& G0obsvec);
RcppExport SEXP _PartialNetwork_peerMCMC_pl(SEXP ySEXP, SEXP XSEXP, SEXP XoneSEXP, SEXP GnormSEXP, SEXP G0obsSEXP, SEXP priorSEXP, SEXP ListIndexSEXP, SEXP MSEXP, SEXP NSEXP, SEXP kbetaSEXP, SEXP kgammaSEXP, SEXP theta0SEXP, SEXP invsigmathetaSEXP, SEXP zeta0SEXP, SEXP invsigma2zetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP dZSEXP, SEXP weightSEXP, SEXP murhoSEXP, SEXP VrhoSEXP, SEXP KrhoSEXP, SEXP lFdZrho1SEXP, SEXP lFdZrho0SEXP, SEXP parms0SEXP, SEXP iterationSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP, SEXP progressSEXP, SEXP typeSEXP, SEXP AfixedSEXP, SEXP G0obsvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type Xone(XoneSEXP);
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< List& >::type G0obs(G0obsSEXP);
    Rcpp::traits::input_parameter< List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List& >::type ListIndex(ListIndexSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type kgamma(kgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invsigmatheta(invsigmathetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type invsigma2zeta(invsigma2zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dZ(dZSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type murho(murhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Vrho(VrhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type Krho(KrhoSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type lFdZrho1(lFdZrho1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type lFdZrho0(lFdZrho0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parms0(parms0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< const int& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Afixed(AfixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type G0obsvec(G0obsvecSEXP);
    rcpp_result_gen = Rcpp::wrap(peerMCMC_pl(y, X, Xone, Gnorm, G0obs, prior, ListIndex, M, N, kbeta, kgamma, theta0, invsigmatheta, zeta0, invsigma2zeta, a, b, dZ, weight, murho, Vrho, Krho, lFdZrho1, lFdZrho0, parms0, iteration, target, jumpmin, jumpmax, c, progress, type, Afixed, G0obsvec));
    return rcpp_result_gen;
END_RCPP
}
// peerMCMCblock_pl
List peerMCMCblock_pl(const List& y, const List& X, const List& Xone, List& Gnorm, List& G0obs, List& prior, List& ListIndex, const int& M, const IntegerVector& N, const int& kbeta, const int& kgamma, const arma::vec& theta0, const arma::mat& invsigmatheta, const double& zeta0, const double& invsigma2zeta, const double& a, const double& b, const Rcpp::NumericVector weight, const arma::mat& dZ, const arma::vec murho, const arma::mat& Vrho, const int& Krho, Eigen::VectorXd& lFdZrho1, Eigen::VectorXd& lFdZrho0, const arma::vec& parms0, const int& iteration, const arma::vec& target, const arma::vec& jumpmin, const arma::vec& jumpmax, const double& c, const int& progress, const int& nupmax, const int& type, const bool& Afixed, const Eigen::ArrayXd& G0obsvec);
RcppExport SEXP _PartialNetwork_peerMCMCblock_pl(SEXP ySEXP, SEXP XSEXP, SEXP XoneSEXP, SEXP GnormSEXP, SEXP G0obsSEXP, SEXP priorSEXP, SEXP ListIndexSEXP, SEXP MSEXP, SEXP NSEXP, SEXP kbetaSEXP, SEXP kgammaSEXP, SEXP theta0SEXP, SEXP invsigmathetaSEXP, SEXP zeta0SEXP, SEXP invsigma2zetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP weightSEXP, SEXP dZSEXP, SEXP murhoSEXP, SEXP VrhoSEXP, SEXP KrhoSEXP, SEXP lFdZrho1SEXP, SEXP lFdZrho0SEXP, SEXP parms0SEXP, SEXP iterationSEXP, SEXP targetSEXP, SEXP jumpminSEXP, SEXP jumpmaxSEXP, SEXP cSEXP, SEXP progressSEXP, SEXP nupmaxSEXP, SEXP typeSEXP, SEXP AfixedSEXP, SEXP G0obsvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type Xone(XoneSEXP);
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< List& >::type G0obs(G0obsSEXP);
    Rcpp::traits::input_parameter< List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List& >::type ListIndex(ListIndexSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type kgamma(kgammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invsigmatheta(invsigmathetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta0(zeta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type invsigma2zeta(invsigma2zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dZ(dZSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type murho(murhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Vrho(VrhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type Krho(KrhoSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type lFdZrho1(lFdZrho1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type lFdZrho0(lFdZrho0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parms0(parms0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmin(jumpminSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type jumpmax(jumpmaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< const int& >::type nupmax(nupmaxSEXP);
    Rcpp::traits::input_parameter< const int& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Afixed(AfixedSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type G0obsvec(G0obsvecSEXP);
    rcpp_result_gen = Rcpp::wrap(peerMCMCblock_pl(y, X, Xone, Gnorm, G0obs, prior, ListIndex, M, N, kbeta, kgamma, theta0, invsigmatheta, zeta0, invsigma2zeta, a, b, weight, dZ, murho, Vrho, Krho, lFdZrho1, lFdZrho0, parms0, iteration, target, jumpmin, jumpmax, c, progress, nupmax, type, Afixed, G0obsvec));
    return rcpp_result_gen;
END_RCPP
}
// sartpoint
arma::vec sartpoint(List& Gnorm, const int& M, const IntegerVector& N, const int& kbeta, const int& kgamma, const List& y, const List& X, const List& Xone);
RcppExport SEXP _PartialNetwork_sartpoint(SEXP GnormSEXP, SEXP MSEXP, SEXP NSEXP, SEXP kbetaSEXP, SEXP kgammaSEXP, SEXP ySEXP, SEXP XSEXP, SEXP XoneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type kgamma(kgammaSEXP);
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type Xone(XoneSEXP);
    rcpp_result_gen = Rcpp::wrap(sartpoint(Gnorm, M, N, kbeta, kgamma, y, X, Xone));
    return rcpp_result_gen;
END_RCPP
}
// sartpointnoc
arma::vec sartpointnoc(List& Gnorm, const int& M, const IntegerVector& N, const int& kbeta, const List& y, const List& Xone);
RcppExport SEXP _PartialNetwork_sartpointnoc(SEXP GnormSEXP, SEXP MSEXP, SEXP NSEXP, SEXP kbetaSEXP, SEXP ySEXP, SEXP XoneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type Gnorm(GnormSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type kbeta(kbetaSEXP);
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type Xone(XoneSEXP);
    rcpp_result_gen = Rcpp::wrap(sartpointnoc(Gnorm, M, N, kbeta, y, Xone));
    return rcpp_result_gen;
END_RCPP
}
// rem_non_fin
List rem_non_fin(const arma::mat& net);
RcppExport SEXP _PartialNetwork_rem_non_fin(SEXP netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type net(netSEXP);
    rcpp_result_gen = Rcpp::wrap(rem_non_fin(net));
    return rcpp_result_gen;
END_RCPP
}
// falbeta0
arma::vec falbeta0(const int& R, List& distr, const arma::vec& y, const arma::vec& Gy, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_falbeta0(SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP GySEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(falbeta0(R, distr, y, Gy, GX2, V, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta0
List fmvzeta0(const double& alpha, const arma::vec& beta, const int& R, List& distr, const arma::vec& y, const arma::vec& Gy, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta0(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP GySEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta0(alpha, beta, R, distr, y, Gy, GX2, V, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH0
List fmvzetaH0(const double& alpha, const arma::vec& beta, const int& R, List& distr, const arma::vec& y, const arma::vec& Gy, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH0(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP GySEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH0(alpha, beta, R, distr, y, Gy, GX2, V, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// falbeta0nc
arma::vec falbeta0nc(const int& R, List& distr, const arma::vec& y, const arma::vec& Gy, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_falbeta0nc(SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP GySEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(falbeta0nc(R, distr, y, Gy, GX2, V, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta0nc
List fmvzeta0nc(const double& alpha, const arma::vec& beta, const int& R, List& distr, const arma::vec& y, const arma::vec& Gy, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta0nc(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP GySEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta0nc(alpha, beta, R, distr, y, Gy, GX2, V, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH0nc
List fmvzetaH0nc(const double& alpha, const arma::vec& beta, const int& R, List& distr, const arma::vec& y, const arma::vec& Gy, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH0nc(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP GySEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH0nc(alpha, beta, R, distr, y, Gy, GX2, V, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// falbeta0fe
arma::vec falbeta0fe(const int& R, List& distr, const arma::vec& y, const arma::vec& Gy, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_falbeta0fe(SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP GySEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(falbeta0fe(R, distr, y, Gy, GX2, V, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta0fe
List fmvzeta0fe(const double& alpha, const arma::vec& beta, const int& R, List& distr, const arma::vec& y, const arma::vec& Gy, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta0fe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP GySEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta0fe(alpha, beta, R, distr, y, Gy, GX2, V, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH0fe
List fmvzetaH0fe(const double& alpha, const arma::vec& beta, const int& R, List& distr, const arma::vec& y, const arma::vec& Gy, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH0fe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP GySEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH0fe(alpha, beta, R, distr, y, Gy, GX2, V, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// falbeta0ncfe
arma::vec falbeta0ncfe(const int& R, List& distr, const arma::vec& y, const arma::vec& Gy, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_falbeta0ncfe(SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP GySEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(falbeta0ncfe(R, distr, y, Gy, GX2, V, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta0ncfe
List fmvzeta0ncfe(const double& alpha, const arma::vec& beta, const int& R, List& distr, const arma::vec& y, const arma::vec& Gy, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta0ncfe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP GySEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta0ncfe(alpha, beta, R, distr, y, Gy, GX2, V, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH0ncfe
List fmvzetaH0ncfe(const double& alpha, const arma::vec& beta, const int& R, List& distr, const arma::vec& y, const arma::vec& Gy, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH0ncfe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP GySEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH0ncfe(alpha, beta, R, distr, y, Gy, GX2, V, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fbeta1
arma::vec fbeta1(const double& alpha, arma::vec& Day, arma::mat& Ra, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fbeta1(SEXP alphaSEXP, SEXP DaySEXP, SEXP RaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Day(DaySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ra(RaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fbeta1(alpha, Day, Ra, R, S, T, distr, Ilist, y, X1, X2, GX2, V, W, smoother, hN, Kx1, Kx2, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fgmm1
double fgmm1(const double& alpha, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fgmm1(SEXP alphaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fgmm1(alpha, R, S, T, distr, Ilist, y, X1, X2, GX2, V, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta1
List fmvzeta1(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta1(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta1(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, GX2, V, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH1
List fmvzetaH1(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH1(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH1(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, GX2, V, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fbeta1nc
arma::vec fbeta1nc(const double& alpha, arma::vec& Day, arma::mat& Ra, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fbeta1nc(SEXP alphaSEXP, SEXP DaySEXP, SEXP RaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Day(DaySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ra(RaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fbeta1nc(alpha, Day, Ra, R, S, T, distr, Ilist, y, X1, X2, GX2, W, smoother, hN, Kx1, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fgmm1nc
double fgmm1nc(const double& alpha, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fgmm1nc(SEXP alphaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fgmm1nc(alpha, R, S, T, distr, Ilist, y, X1, X2, GX2, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta1nc
List fmvzeta1nc(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta1nc(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta1nc(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, GX2, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH1nc
List fmvzetaH1nc(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH1nc(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH1nc(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, GX2, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fbeta1fe
arma::vec fbeta1fe(const double& alpha, arma::vec& Day, arma::mat& Ra, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fbeta1fe(SEXP alphaSEXP, SEXP DaySEXP, SEXP RaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Day(DaySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ra(RaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fbeta1fe(alpha, Day, Ra, R, S, T, distr, Ilist, y, X1, X2, GX2, V, W, smoother, hN, Kx1, Kx2, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fgmm1fe
double fgmm1fe(const double& alpha, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fgmm1fe(SEXP alphaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fgmm1fe(alpha, R, S, T, distr, Ilist, y, X1, X2, GX2, V, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta1fe
List fmvzeta1fe(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta1fe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta1fe(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, GX2, V, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH1fe
List fmvzetaH1fe(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& V, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH1fe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP VSEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH1fe(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, GX2, V, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fbeta1ncfe
arma::vec fbeta1ncfe(const double& alpha, arma::vec& Day, arma::mat& Ra, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fbeta1ncfe(SEXP alphaSEXP, SEXP DaySEXP, SEXP RaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Day(DaySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ra(RaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fbeta1ncfe(alpha, Day, Ra, R, S, T, distr, Ilist, y, X1, X2, GX2, W, smoother, hN, Kx1, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fgmm1ncfe
double fgmm1ncfe(const double& alpha, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fgmm1ncfe(SEXP alphaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fgmm1ncfe(alpha, R, S, T, distr, Ilist, y, X1, X2, GX2, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta1ncfe
List fmvzeta1ncfe(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta1ncfe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta1ncfe(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, GX2, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH1ncfe
List fmvzetaH1ncfe(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& GX2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH1ncfe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GX2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type GX2(GX2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH1ncfe(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, GX2, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// falbeta2
arma::vec falbeta2(const int& R, const int& S, List& distr, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::vec& Gy, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_falbeta2(SEXP RSEXP, SEXP SSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GySEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(falbeta2(R, S, distr, y, X1, X2, Gy, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta2
List fmvzeta2(const double& alpha, const arma::vec& beta, const int& R, const int& S, List& distr, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::vec& Gy, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta2(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GySEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta2(alpha, beta, R, S, distr, y, X1, X2, Gy, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH2
List fmvzetaH2(const double& alpha, const arma::vec& beta, const int& R, const int& S, List& distr, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::vec& Gy, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH2(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GySEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH2(alpha, beta, R, S, distr, y, X1, X2, Gy, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// falbeta2nc
arma::vec falbeta2nc(const int& R, List& distr, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::vec& Gy, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_falbeta2nc(SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GySEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(falbeta2nc(R, distr, y, X1, X2, Gy, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta2nc
List fmvzeta2nc(const double& alpha, const arma::vec& beta, const int& R, List& distr, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::vec& Gy, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta2nc(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GySEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta2nc(alpha, beta, R, distr, y, X1, X2, Gy, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH2nc
List fmvzetaH2nc(const double& alpha, const arma::vec& beta, const int& R, List& distr, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::vec& Gy, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH2nc(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GySEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH2nc(alpha, beta, R, distr, y, X1, X2, Gy, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// falbeta2fe
arma::vec falbeta2fe(const int& R, const int& S, List& distr, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::vec& Gy, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_falbeta2fe(SEXP RSEXP, SEXP SSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GySEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(falbeta2fe(R, S, distr, y, X1, X2, Gy, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta2fe
List fmvzeta2fe(const double& alpha, const arma::vec& beta, const int& R, const int& S, List& distr, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::vec& Gy, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta2fe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GySEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta2fe(alpha, beta, R, S, distr, y, X1, X2, Gy, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH2fe
List fmvzetaH2fe(const double& alpha, const arma::vec& beta, const int& R, const int& S, List& distr, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::vec& Gy, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH2fe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GySEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH2fe(alpha, beta, R, S, distr, y, X1, X2, Gy, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// falbeta2ncfe
arma::vec falbeta2ncfe(const int& R, List& distr, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::vec& Gy, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_falbeta2ncfe(SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GySEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(falbeta2ncfe(R, distr, y, X1, X2, Gy, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta2ncfe
List fmvzeta2ncfe(const double& alpha, const arma::vec& beta, const int& R, List& distr, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::vec& Gy, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta2ncfe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GySEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta2ncfe(alpha, beta, R, distr, y, X1, X2, Gy, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH2ncfe
List fmvzetaH2ncfe(const double& alpha, const arma::vec& beta, const int& R, List& distr, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::vec& Gy, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH2ncfe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP distrSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GySEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH2ncfe(alpha, beta, R, distr, y, X1, X2, Gy, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fbeta3
arma::vec fbeta3(const double& alpha, arma::vec& Day, arma::mat& Ra, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fbeta3(SEXP alphaSEXP, SEXP DaySEXP, SEXP RaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Day(DaySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ra(RaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fbeta3(alpha, Day, Ra, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, Kx2, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fgmm3
double fgmm3(const double& alpha, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fgmm3(SEXP alphaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fgmm3(alpha, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta3
List fmvzeta3(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta3(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta3(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH3
List fmvzetaH3(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH3(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH3(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fbeta3nc
arma::vec fbeta3nc(const double& alpha, arma::vec& Day, arma::mat& Ra, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fbeta3nc(SEXP alphaSEXP, SEXP DaySEXP, SEXP RaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Day(DaySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ra(RaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fbeta3nc(alpha, Day, Ra, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fgmm3nc
double fgmm3nc(const double& alpha, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fgmm3nc(SEXP alphaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fgmm3nc(alpha, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta3nc
List fmvzeta3nc(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta3nc(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta3nc(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH3nc
List fmvzetaH3nc(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH3nc(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH3nc(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fbeta3fe
arma::vec fbeta3fe(const double& alpha, arma::vec& Day, arma::mat& Ra, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fbeta3fe(SEXP alphaSEXP, SEXP DaySEXP, SEXP RaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Day(DaySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ra(RaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fbeta3fe(alpha, Day, Ra, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, Kx2, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fgmm3fe
double fgmm3fe(const double& alpha, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fgmm3fe(SEXP alphaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fgmm3fe(alpha, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta3fe
List fmvzeta3fe(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta3fe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta3fe(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH3fe
List fmvzetaH3fe(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& Kx2, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH3fe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP Kx2SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx2(Kx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH3fe(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, Kx2, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fbeta3ncfe
arma::vec fbeta3ncfe(const double& alpha, arma::vec& Day, arma::mat& Ra, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fbeta3ncfe(SEXP alphaSEXP, SEXP DaySEXP, SEXP RaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Day(DaySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ra(RaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fbeta3ncfe(alpha, Day, Ra, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fgmm3ncfe
double fgmm3ncfe(const double& alpha, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fgmm3ncfe(SEXP alphaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fgmm3ncfe(alpha, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzeta3ncfe
List fmvzeta3ncfe(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzeta3ncfe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzeta3ncfe(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fmvzetaH3ncfe
List fmvzetaH3ncfe(const double& alpha, const arma::vec& beta, const int& R, const int& S, const int& T, List& distr, List& Ilist, const arma::vec& y, const arma::mat& X1, const arma::mat& X2, const arma::mat& W, const bool& smoother, const double& hN, const int& Kx1, const int& ninstr, const int& M, const arma::vec& N, const int& Pm, const arma::vec& Ncum);
RcppExport SEXP _PartialNetwork_fmvzetaH3ncfe(SEXP alphaSEXP, SEXP betaSEXP, SEXP RSEXP, SEXP SSEXP, SEXP TSEXP, SEXP distrSEXP, SEXP IlistSEXP, SEXP ySEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP WSEXP, SEXP smootherSEXP, SEXP hNSEXP, SEXP Kx1SEXP, SEXP ninstrSEXP, SEXP MSEXP, SEXP NSEXP, SEXP PmSEXP, SEXP NcumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< List& >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< List& >::type Ilist(IlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type smoother(smootherSEXP);
    Rcpp::traits::input_parameter< const double& >::type hN(hNSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx1(Kx1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ninstr(ninstrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ncum(NcumSEXP);
    rcpp_result_gen = Rcpp::wrap(fmvzetaH3ncfe(alpha, beta, R, S, T, distr, Ilist, y, X1, X2, W, smoother, hN, Kx1, ninstr, M, N, Pm, Ncum));
    return rcpp_result_gen;
END_RCPP
}
// fListIndex
List fListIndex(List& prior, List& G0obs, const int& M, const IntegerVector& N);
RcppExport SEXP _PartialNetwork_fListIndex(SEXP priorSEXP, SEXP G0obsSEXP, SEXP MSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List& >::type G0obs(G0obsSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(fListIndex(prior, G0obs, M, N));
    return rcpp_result_gen;
END_RCPP
}
// fGnormalise
List fGnormalise(List& u, const double& M);
RcppExport SEXP _PartialNetwork_fGnormalise(SEXP uSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(fGnormalise(u, M));
    return rcpp_result_gen;
END_RCPP
}
// frVtoM
List frVtoM(const Eigen::VectorXd& u, const Rcpp::IntegerVector& N, const double& M);
RcppExport SEXP _PartialNetwork_frVtoM(SEXP uSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(frVtoM(u, N, M));
    return rcpp_result_gen;
END_RCPP
}
// frVtoMnorm
List frVtoMnorm(const arma::vec& u, const IntegerVector& N, const double& M);
RcppExport SEXP _PartialNetwork_frVtoMnorm(SEXP uSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(frVtoMnorm(u, N, M));
    return rcpp_result_gen;
END_RCPP
}
// frMtoV
Eigen::VectorXd frMtoV(List& u, const Rcpp::IntegerVector& N, const double& M);
RcppExport SEXP _PartialNetwork_frMtoV(SEXP uSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(frMtoV(u, N, M));
    return rcpp_result_gen;
END_RCPP
}
// frMceiltoV
Eigen::VectorXd frMceiltoV(List& u, const Rcpp::IntegerVector& N, const double& M);
RcppExport SEXP _PartialNetwork_frMceiltoV(SEXP uSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(frMceiltoV(u, N, M));
    return rcpp_result_gen;
END_RCPP
}
// flspacerho1
List flspacerho1(const double& T, const double& P, const arma::cube& z, const arma::mat& d, const arma::vec& zeta, const unsigned int& N1, const unsigned int& Metrostart);
RcppExport SEXP _PartialNetwork_flspacerho1(SEXP TSEXP, SEXP PSEXP, SEXP zSEXP, SEXP dSEXP, SEXP zetaSEXP, SEXP N1SEXP, SEXP MetrostartSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const double& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type Metrostart(MetrostartSEXP);
    rcpp_result_gen = Rcpp::wrap(flspacerho1(T, P, z, d, zeta, N1, Metrostart));
    return rcpp_result_gen;
END_RCPP
}
// flspacerho2
List flspacerho2(const double& T, const double& P, const arma::cube& z, const arma::mat& d, const arma::vec& zeta, const arma::mat& Xard, const arma::mat& Xnonard, const unsigned int& N1, const unsigned int& N2, const unsigned int& M, const unsigned int& Metrostart);
RcppExport SEXP _PartialNetwork_flspacerho2(SEXP TSEXP, SEXP PSEXP, SEXP zSEXP, SEXP dSEXP, SEXP zetaSEXP, SEXP XardSEXP, SEXP XnonardSEXP, SEXP N1SEXP, SEXP N2SEXP, SEXP MSEXP, SEXP MetrostartSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const double& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xard(XardSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xnonard(XnonardSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N2(N2SEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type Metrostart(MetrostartSEXP);
    rcpp_result_gen = Rcpp::wrap(flspacerho2(T, P, z, d, zeta, Xard, Xnonard, N1, N2, M, Metrostart));
    return rcpp_result_gen;
END_RCPP
}
// fdnetARD
arma::mat fdnetARD(arma::mat& zm, arma::vec& num, arma::vec& dm, const int& N1m, const int& N2m, const int& Nm, const int& Pm, const double& zetam, const double& logCpzetam, const arma::umat& neighborm, const arma::mat& weightm, const arma::uvec& iARDm, const arma::uvec& inonARDm);
RcppExport SEXP _PartialNetwork_fdnetARD(SEXP zmSEXP, SEXP numSEXP, SEXP dmSEXP, SEXP N1mSEXP, SEXP N2mSEXP, SEXP NmSEXP, SEXP PmSEXP, SEXP zetamSEXP, SEXP logCpzetamSEXP, SEXP neighbormSEXP, SEXP weightmSEXP, SEXP iARDmSEXP, SEXP inonARDmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type zm(zmSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type num(numSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< const int& >::type N1m(N1mSEXP);
    Rcpp::traits::input_parameter< const int& >::type N2m(N2mSEXP);
    Rcpp::traits::input_parameter< const int& >::type Nm(NmSEXP);
    Rcpp::traits::input_parameter< const int& >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< const double& >::type zetam(zetamSEXP);
    Rcpp::traits::input_parameter< const double& >::type logCpzetam(logCpzetamSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type neighborm(neighbormSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weightm(weightmSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type iARDm(iARDmSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type inonARDm(inonARDmSEXP);
    rcpp_result_gen = Rcpp::wrap(fdnetARD(zm, num, dm, N1m, N2m, Nm, Pm, zetam, logCpzetam, neighborm, weightm, iARDm, inonARDm));
    return rcpp_result_gen;
END_RCPP
}
// rvMFcpp
arma::mat rvMFcpp(const int& size, const arma::vec& theta);
RcppExport SEXP _PartialNetwork_rvMFcpp(SEXP sizeSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(rvMFcpp(size, theta));
    return rcpp_result_gen;
END_RCPP
}
// logCpvMFcpp
double logCpvMFcpp(const int& p, const double& k);
RcppExport SEXP _PartialNetwork_logCpvMFcpp(SEXP pSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(logCpvMFcpp(p, k));
    return rcpp_result_gen;
END_RCPP
}
// dvMFcpp
NumericVector dvMFcpp(const arma::mat& z, const arma::vec& theta, const bool& logp);
RcppExport SEXP _PartialNetwork_dvMFcpp(SEXP zSEXP, SEXP thetaSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(dvMFcpp(z, theta, logp));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PartialNetwork_updateGP", (DL_FUNC) &_PartialNetwork_updateGP, 19},
    {"_PartialNetwork_dnetwork1", (DL_FUNC) &_PartialNetwork_dnetwork1, 8},
    {"_PartialNetwork_dnetwork2", (DL_FUNC) &_PartialNetwork_dnetwork2, 12},
    {"_PartialNetwork_Prob", (DL_FUNC) &_PartialNetwork_Prob, 4},
    {"_PartialNetwork_Graph", (DL_FUNC) &_PartialNetwork_Graph, 1},
    {"_PartialNetwork_instruments1", (DL_FUNC) &_PartialNetwork_instruments1, 6},
    {"_PartialNetwork_instruments2", (DL_FUNC) &_PartialNetwork_instruments2, 5},
    {"_PartialNetwork_flistGnorm1", (DL_FUNC) &_PartialNetwork_flistGnorm1, 5},
    {"_PartialNetwork_flistGnorm2", (DL_FUNC) &_PartialNetwork_flistGnorm2, 5},
    {"_PartialNetwork_flistGnorm1nc", (DL_FUNC) &_PartialNetwork_flistGnorm1nc, 4},
    {"_PartialNetwork_flistGnorm2nc", (DL_FUNC) &_PartialNetwork_flistGnorm2nc, 4},
    {"_PartialNetwork_simG", (DL_FUNC) &_PartialNetwork_simG, 3},
    {"_PartialNetwork_simGnorm", (DL_FUNC) &_PartialNetwork_simGnorm, 3},
    {"_PartialNetwork_peerMCMCnoc_none", (DL_FUNC) &_PartialNetwork_peerMCMCnoc_none, 21},
    {"_PartialNetwork_peerMCMCblocknoc_none", (DL_FUNC) &_PartialNetwork_peerMCMCblocknoc_none, 22},
    {"_PartialNetwork_peerMCMC_none", (DL_FUNC) &_PartialNetwork_peerMCMC_none, 23},
    {"_PartialNetwork_peerMCMCblock_none", (DL_FUNC) &_PartialNetwork_peerMCMCblock_none, 24},
    {"_PartialNetwork_peerMCMCnoc_ard", (DL_FUNC) &_PartialNetwork_peerMCMCnoc_ard, 34},
    {"_PartialNetwork_peerMCMCblocknoc_ard", (DL_FUNC) &_PartialNetwork_peerMCMCblocknoc_ard, 35},
    {"_PartialNetwork_peerMCMC_ard", (DL_FUNC) &_PartialNetwork_peerMCMC_ard, 36},
    {"_PartialNetwork_peerMCMCblock_ard", (DL_FUNC) &_PartialNetwork_peerMCMCblock_ard, 37},
    {"_PartialNetwork_peerMCMCnoc_pl", (DL_FUNC) &_PartialNetwork_peerMCMCnoc_pl, 32},
    {"_PartialNetwork_peerMCMCblocknoc_pl", (DL_FUNC) &_PartialNetwork_peerMCMCblocknoc_pl, 33},
    {"_PartialNetwork_peerMCMC_pl", (DL_FUNC) &_PartialNetwork_peerMCMC_pl, 34},
    {"_PartialNetwork_peerMCMCblock_pl", (DL_FUNC) &_PartialNetwork_peerMCMCblock_pl, 35},
    {"_PartialNetwork_sartpoint", (DL_FUNC) &_PartialNetwork_sartpoint, 8},
    {"_PartialNetwork_sartpointnoc", (DL_FUNC) &_PartialNetwork_sartpointnoc, 6},
    {"_PartialNetwork_rem_non_fin", (DL_FUNC) &_PartialNetwork_rem_non_fin, 1},
    {"_PartialNetwork_falbeta0", (DL_FUNC) &_PartialNetwork_falbeta0, 16},
    {"_PartialNetwork_fmvzeta0", (DL_FUNC) &_PartialNetwork_fmvzeta0, 18},
    {"_PartialNetwork_fmvzetaH0", (DL_FUNC) &_PartialNetwork_fmvzetaH0, 18},
    {"_PartialNetwork_falbeta0nc", (DL_FUNC) &_PartialNetwork_falbeta0nc, 15},
    {"_PartialNetwork_fmvzeta0nc", (DL_FUNC) &_PartialNetwork_fmvzeta0nc, 17},
    {"_PartialNetwork_fmvzetaH0nc", (DL_FUNC) &_PartialNetwork_fmvzetaH0nc, 17},
    {"_PartialNetwork_falbeta0fe", (DL_FUNC) &_PartialNetwork_falbeta0fe, 16},
    {"_PartialNetwork_fmvzeta0fe", (DL_FUNC) &_PartialNetwork_fmvzeta0fe, 18},
    {"_PartialNetwork_fmvzetaH0fe", (DL_FUNC) &_PartialNetwork_fmvzetaH0fe, 18},
    {"_PartialNetwork_falbeta0ncfe", (DL_FUNC) &_PartialNetwork_falbeta0ncfe, 15},
    {"_PartialNetwork_fmvzeta0ncfe", (DL_FUNC) &_PartialNetwork_fmvzeta0ncfe, 17},
    {"_PartialNetwork_fmvzetaH0ncfe", (DL_FUNC) &_PartialNetwork_fmvzetaH0ncfe, 17},
    {"_PartialNetwork_fbeta1", (DL_FUNC) &_PartialNetwork_fbeta1, 22},
    {"_PartialNetwork_fgmm1", (DL_FUNC) &_PartialNetwork_fgmm1, 21},
    {"_PartialNetwork_fmvzeta1", (DL_FUNC) &_PartialNetwork_fmvzeta1, 22},
    {"_PartialNetwork_fmvzetaH1", (DL_FUNC) &_PartialNetwork_fmvzetaH1, 22},
    {"_PartialNetwork_fbeta1nc", (DL_FUNC) &_PartialNetwork_fbeta1nc, 20},
    {"_PartialNetwork_fgmm1nc", (DL_FUNC) &_PartialNetwork_fgmm1nc, 19},
    {"_PartialNetwork_fmvzeta1nc", (DL_FUNC) &_PartialNetwork_fmvzeta1nc, 20},
    {"_PartialNetwork_fmvzetaH1nc", (DL_FUNC) &_PartialNetwork_fmvzetaH1nc, 20},
    {"_PartialNetwork_fbeta1fe", (DL_FUNC) &_PartialNetwork_fbeta1fe, 22},
    {"_PartialNetwork_fgmm1fe", (DL_FUNC) &_PartialNetwork_fgmm1fe, 21},
    {"_PartialNetwork_fmvzeta1fe", (DL_FUNC) &_PartialNetwork_fmvzeta1fe, 22},
    {"_PartialNetwork_fmvzetaH1fe", (DL_FUNC) &_PartialNetwork_fmvzetaH1fe, 22},
    {"_PartialNetwork_fbeta1ncfe", (DL_FUNC) &_PartialNetwork_fbeta1ncfe, 20},
    {"_PartialNetwork_fgmm1ncfe", (DL_FUNC) &_PartialNetwork_fgmm1ncfe, 19},
    {"_PartialNetwork_fmvzeta1ncfe", (DL_FUNC) &_PartialNetwork_fmvzeta1ncfe, 20},
    {"_PartialNetwork_fmvzetaH1ncfe", (DL_FUNC) &_PartialNetwork_fmvzetaH1ncfe, 20},
    {"_PartialNetwork_falbeta2", (DL_FUNC) &_PartialNetwork_falbeta2, 17},
    {"_PartialNetwork_fmvzeta2", (DL_FUNC) &_PartialNetwork_fmvzeta2, 19},
    {"_PartialNetwork_fmvzetaH2", (DL_FUNC) &_PartialNetwork_fmvzetaH2, 19},
    {"_PartialNetwork_falbeta2nc", (DL_FUNC) &_PartialNetwork_falbeta2nc, 15},
    {"_PartialNetwork_fmvzeta2nc", (DL_FUNC) &_PartialNetwork_fmvzeta2nc, 17},
    {"_PartialNetwork_fmvzetaH2nc", (DL_FUNC) &_PartialNetwork_fmvzetaH2nc, 17},
    {"_PartialNetwork_falbeta2fe", (DL_FUNC) &_PartialNetwork_falbeta2fe, 17},
    {"_PartialNetwork_fmvzeta2fe", (DL_FUNC) &_PartialNetwork_fmvzeta2fe, 19},
    {"_PartialNetwork_fmvzetaH2fe", (DL_FUNC) &_PartialNetwork_fmvzetaH2fe, 19},
    {"_PartialNetwork_falbeta2ncfe", (DL_FUNC) &_PartialNetwork_falbeta2ncfe, 15},
    {"_PartialNetwork_fmvzeta2ncfe", (DL_FUNC) &_PartialNetwork_fmvzeta2ncfe, 17},
    {"_PartialNetwork_fmvzetaH2ncfe", (DL_FUNC) &_PartialNetwork_fmvzetaH2ncfe, 17},
    {"_PartialNetwork_fbeta3", (DL_FUNC) &_PartialNetwork_fbeta3, 20},
    {"_PartialNetwork_fgmm3", (DL_FUNC) &_PartialNetwork_fgmm3, 19},
    {"_PartialNetwork_fmvzeta3", (DL_FUNC) &_PartialNetwork_fmvzeta3, 20},
    {"_PartialNetwork_fmvzetaH3", (DL_FUNC) &_PartialNetwork_fmvzetaH3, 20},
    {"_PartialNetwork_fbeta3nc", (DL_FUNC) &_PartialNetwork_fbeta3nc, 19},
    {"_PartialNetwork_fgmm3nc", (DL_FUNC) &_PartialNetwork_fgmm3nc, 18},
    {"_PartialNetwork_fmvzeta3nc", (DL_FUNC) &_PartialNetwork_fmvzeta3nc, 19},
    {"_PartialNetwork_fmvzetaH3nc", (DL_FUNC) &_PartialNetwork_fmvzetaH3nc, 19},
    {"_PartialNetwork_fbeta3fe", (DL_FUNC) &_PartialNetwork_fbeta3fe, 20},
    {"_PartialNetwork_fgmm3fe", (DL_FUNC) &_PartialNetwork_fgmm3fe, 19},
    {"_PartialNetwork_fmvzeta3fe", (DL_FUNC) &_PartialNetwork_fmvzeta3fe, 20},
    {"_PartialNetwork_fmvzetaH3fe", (DL_FUNC) &_PartialNetwork_fmvzetaH3fe, 20},
    {"_PartialNetwork_fbeta3ncfe", (DL_FUNC) &_PartialNetwork_fbeta3ncfe, 19},
    {"_PartialNetwork_fgmm3ncfe", (DL_FUNC) &_PartialNetwork_fgmm3ncfe, 18},
    {"_PartialNetwork_fmvzeta3ncfe", (DL_FUNC) &_PartialNetwork_fmvzeta3ncfe, 19},
    {"_PartialNetwork_fmvzetaH3ncfe", (DL_FUNC) &_PartialNetwork_fmvzetaH3ncfe, 19},
    {"_PartialNetwork_fListIndex", (DL_FUNC) &_PartialNetwork_fListIndex, 4},
    {"_PartialNetwork_fGnormalise", (DL_FUNC) &_PartialNetwork_fGnormalise, 2},
    {"_PartialNetwork_frVtoM", (DL_FUNC) &_PartialNetwork_frVtoM, 3},
    {"_PartialNetwork_frVtoMnorm", (DL_FUNC) &_PartialNetwork_frVtoMnorm, 3},
    {"_PartialNetwork_frMtoV", (DL_FUNC) &_PartialNetwork_frMtoV, 3},
    {"_PartialNetwork_frMceiltoV", (DL_FUNC) &_PartialNetwork_frMceiltoV, 3},
    {"_PartialNetwork_flspacerho1", (DL_FUNC) &_PartialNetwork_flspacerho1, 7},
    {"_PartialNetwork_flspacerho2", (DL_FUNC) &_PartialNetwork_flspacerho2, 11},
    {"_PartialNetwork_fdnetARD", (DL_FUNC) &_PartialNetwork_fdnetARD, 13},
    {"_PartialNetwork_rvMFcpp", (DL_FUNC) &_PartialNetwork_rvMFcpp, 2},
    {"_PartialNetwork_logCpvMFcpp", (DL_FUNC) &_PartialNetwork_logCpvMFcpp, 2},
    {"_PartialNetwork_dvMFcpp", (DL_FUNC) &_PartialNetwork_dvMFcpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_PartialNetwork(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
